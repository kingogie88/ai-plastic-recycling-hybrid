name: CI

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      debug_enabled:
        description: 'Enable debug mode'
        required: false
        type: boolean
        default: false

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio black flake8 mypy
    
    - name: Run linting
      run: |
        black --check .
        flake8 .
    
    - name: Run type checking
      run: |
        mypy src/
        mypy tests/
    
    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        SECRET_KEY: test_secret_key
        REDIS_URL: redis://localhost:6379/0
        VISION_MODEL_PATH: models/plastic_yolo11.pt
        ROBOT_IP: localhost
        ROBOT_PORT: 8002
        CONFIDENCE_THRESHOLD: 0.85
        DEBUG: ${{ inputs.debug_enabled }}
      run: |
        pytest tests/ --cov=src/ --cov-report=xml -v
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    if: ${{ !inputs.debug_enabled }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Bandit Security Linter
        run: |
          pip install bandit[toml]
          bandit -r src/ -f json -o bandit-report.json
      
      - name: Run Safety Check
        run: |
          pip install safety
          safety check --json --output safety-report.json
      
      - name: Run Semgrep
        run: |
          pip install semgrep
          semgrep --config=auto src/
      
      - name: Docker Security Scan
        run: |
          docker run --rm -v $(pwd):/workspace aquasec/trivy fs /workspace

  build:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: ${{ !inputs.debug_enabled }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Docker images
        run: |
          # Build vision service
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t ghcr.io/${{ github.repository }}/vision:${{ inputs.environment }} \
            -f docker/Dockerfile.vision --push .
          
          # Build API service
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t ghcr.io/${{ github.repository }}/api:${{ inputs.environment }} \
            -f docker/Dockerfile.api --push .
            
          # Build robot controller
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t ghcr.io/${{ github.repository }}/robot:${{ inputs.environment }} \
            -f docker/Dockerfile.robot --push .
            
          # Build monitoring
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t ghcr.io/${{ github.repository }}/monitoring:${{ inputs.environment }} \
            -f docker/Dockerfile.monitoring --push .

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ !inputs.debug_enabled }}
    environment:
      name: ${{ inputs.environment }}
      url: https://api.recycling.example.com
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Kubernetes
        env:
          KUBECONFIG_DATA: ${{ secrets.KUBECONFIG }}
        run: |
          echo "$KUBECONFIG_DATA" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig
          
          # Create namespace if it doesn't exist
          kubectl create namespace recycling --dry-run=client -o yaml | kubectl apply -f -
          
          # Apply ConfigMaps and Secrets first
          kubectl apply -f k8s/config/
          kubectl apply -f k8s/secrets/
          
          # Apply PVCs
          kubectl apply -f k8s/storage/
          
          # Apply deployments and services
          kubectl apply -f k8s/deployments/
          kubectl apply -f k8s/services/
          
          # Wait for rollouts
          kubectl -n recycling rollout status deployment/ai-circo-api
          kubectl -n recycling rollout status deployment/ai-circo-vision
          kubectl -n recycling rollout status deployment/ai-circo-robot
          kubectl -n recycling rollout status deployment/ai-circo-monitoring 